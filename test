class clock:
    def __init__(self,hr,mint,sec):
        assert type(hr)==int,'Incorrect data type'
        assert hr>=0 and hr<24,'Incorrect time format(enter value between 0 to 23)'
        assert type(mint)==int,'Incorrect data type'
        assert mint>=0 and mint<60,'Incorrect time format(enter value between 0 to 59)'
        assert type(sec)==int,'Incorrect data type'
        assert sec>=0 and sec<60,'Incorrect time format(enter value between 0 to 59)'
        self.hr=hr
        self.minute=mint
        self.second=sec

    def set_hr(self,hr):
        assert type(hr)==int,'Incorrect data type'
        assert hr>=0 and hr<24,'Incorrect time format(enter value between 0 to 23)'
        self.hr = hr

    def set_min(self,mint):
        assert type(mint)==int,'Incorrect data type'
        assert mint>=0 and mint<60,'Incorrect time format(enter value between 0 to 59)'
        self.minute = mint

    def set_sec(self,sec):
        assert type(sec)==int,'Incorrect data type'
        assert sec>=0 and sec<60,'Incorrect time format(enter value between 0 to 59)'
        self.second = sec

    def get_hr(self):
        return self.hr

    def get_min(self):
        return self.minute

    def get_sec(self):
        return self.second
        
    def __str__(self):
        return str(self.hr)+":"+str(self.minute)+":"+str(self.second)

    def tick(self):
        carry_sec = 0
        carry_min = 0
        self.carry_hour = 0
        self.second = self.second + 1
        if self.second ==60:
            self.second = 0
            carry_sec = 1
            self.minute = self.minute + carry_sec
            if self.minute == 60:
                self.minute = 0
                carry_min = 1
                self.hr = self.hr + carry_min
                if self.hr ==24:
                    self.hr = 0
                    self.carry_hour = 1
        return str(self.hr)+":"+str(self.minute)+":"+str(self.second)
    
            


class calendar:
    def __init__(self,day,mon,yr):
        
        self.day=day
        self.month=mon
        self.yr=yr
    
    def set_day(self,day):
        self.day = day

    def set_month(self,mon):
        self.month = mon

    def set_yr(self,yr):
        self.yr = yr

    def get_day(self):
        return (self.day)  

    def get_month(self):
        return (self.month) 

    def get_yr(self):
        return (self.yr)
        
    def __str__(self):
        return str(self.day)+"/"+str(self.month)+"/"+str(self.yr)

    def advance(self):
        check_mon_odd = [1,3,5,7,8,10,12]
        check_leapyr = False

        if self.yr%100!=0 and self.yr%4 ==0:
            check_leapyr = True
        if self.yr%100==0 and self.yr%400 ==0:
            check_leapyr = True

        self.day = self.day + 1
        if self.month in check_mon_odd:
            lim = 31
        elif self.month == 2:
            if check_leapyr==True:
                lim = 29
            else:
                lim = 28
        else:
            lim = 30

        if self.day > lim:
            self.day = 1
            self.month = self.month +1
            if self.month > 12:
                self.month = 1
                self.yr += 1
        return str(self.day)+"/"+str(self.month)+"/"+str(self.yr)

class calendarclock(clock,calendar):
    def __init__(self,hr,mint,sec,day,mon,yr):
        self.day = day
        self.month = mon
        self.yr = yr
        self.hr = hr
        self.minute = mint
        self.second = sec 
    def increment(self):
        self.tick()
        if self.carry_hour==1:
            self.advance()
        return (str(self.hr)+":"+str(self.minute)+":"+str(self.second)+" "+str(self.day)+"/"+str(self.month)+"/"+str(self.yr))
    def __str__(self):
        return (str(self.hr)+":"+str(self.minute)+":"+str(self.second)+" "+str(self.day)+"/"+str(self.month)+"/"+str(self.yr))

    
# Instructions to validate your code. Please comment them at the time of submission 

hr=int(input("enter hrs"))
mint=int(input("enter mins"))
sec=int(input("enter secs"))
cl=clock(hr,mint,sec)
print(cl)
print("sec increased by one "+cl.tick())
yr=int(input("enter yr"))
mon=int(input("enter months"))
day=int(input("enter days"))
ca=calendar(day,mon,yr)
print(ca)
print("day increased by one "+ca.advance())
cc=calendarclock(hr,mint,sec,day,mon,yr)
print(cc)
print(cc.increment())
